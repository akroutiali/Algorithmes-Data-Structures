#include <iostream>
#include <climits>
using namespace std;
/*
      20
    10     30

Algorithme : 
if value<=getMax() the max value on the left node
return FALSE
if value >= getMin return the min value of the right subtree
return FALSE

 check the other node 
*/
/*
Alorithme : 
 INT_MIN<20<=INT_MAX
   INT_VALUE<=10<node->value
             nodevalue<=30<INT_MAX
*/

class BST{
    public:
    int value;
    BST*right;
    BST*left;
    BST(int val)
    {
        value =val;
        right =nullptr;
        left=nullptr;
    }
};
/*
Alorithme : 
Time Complexity O(n)
spaceComplexity O(1)*/
bool is_BST(BST*node,int min=INT_MIN,int max=INT_MAX)
{
    if(node == nullptr)
    return true;
    
    if(node->value<min ||node->value>=max)
    return false;
    bool ret=is_BST(node->left,min,node->value);
    if(ret != 1)
    {
        return false;
    }
    ret=is_BST(node->right,node->value,max);
    if(!ret)
    return false;
      
return true;
}
int main()
{
    BST*root=new BST(20);
    root->left=new BST(10);
    root->left->left=new BST(10);
    root->left->right =new BST(15);
    root->right=new BST(25);
    root->right->right=new BST(30);
    cout<<"is BST =="<<is_BST(root);

    return 0;
}
